service:
  name: yoki

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  instance_state_table: ${opt:stage, 'dev'}-${self:service}-ECSCtrInstanceState
  task_state_table: ${opt:stage, 'dev'}-${self:service}-ECSTaskState
  task_digest_table: ${opt:stage, 'dev'}-${self:service}-ECSTaskDigest
  notifications_table: ${opt:stage, 'dev'}-${self:service}-notifications
  service_groups_table: ${opt:stage, 'dev'}-${self:service}-service-groups
  pythonRequirements:
    dockerizePip: non-linux
  wsgi:
    app: autoapp.app
    packRequirements: false


provider:
  name: aws
  runtime: python3.7
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Batch*
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:custom.instance_state_table}
        - arn:aws:dynamodb:*:*:table/${self:custom.task_state_table}
        - arn:aws:dynamodb:*:*:table/${self:custom.task_digest_table}
        - arn:aws:dynamodb:*:*:table/${self:custom.task_digest_table}/index/*
        - arn:aws:dynamodb:*:*:table/${self:custom.notifications_table}
        - arn:aws:dynamodb:*:*:table/${self:custom.service_groups_table}
    - Effect: Allow
      Action:
        - ecr:DescribeRepositories
        - ecr:DescribeImages
      Resource: "*"
    - Effect: Allow
      Action:
        - ecs:Describe*
        - ecs:List*
        - ecs:UpdateService
        - ecs:RegisterTaskDefinition
        - application-autoscaling:RegisterScalableTarget
        - iam:PassRole
      Resource: "*"


functions:
  app:
    name: ${opt:stage, 'dev'}-${self:service}-api
    handler: wsgi_handler.handler
    environment: ${file(.env.yml):lambda.environment}
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

  ecs-event-handler:
    name: ${opt:stage, 'dev'}-${self:service}-ecs-event-handler
    handler: lambdas.ecs_event.lambda_handler
    description: Store ECS events in dynamodb
    memorySize: 128
    timeout: 60
    environment: ${file(.env.yml):lambda.environment}
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.ecs"
            detail-type:
              - "ECS Task State Change"
              - "ECS Container Instance State Change"

  dynamodb-slack-trigger:
    name: ${opt:stage, 'dev'}-${self:service}-dynamodb-slack-trigger
    handler: lambdas.dynamodb_slack_trigger.lambda_handler
    description: Trigger Slack notifications for task digests.
    memorySize: 128
    timeout: 60
    environment: ${file(.env.yml):lambda.environment}
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ ECSTaskDigest, StreamArn ]


resources:
  Resources:
    ECSCtrInstanceState:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.instance_state_table}
        AttributeDefinitions:
          - AttributeName: containerInstanceArn
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: containerInstanceArn
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: True

    ECSTaskState:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.task_state_table}
        AttributeDefinitions:
          - AttributeName: taskArn
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: taskArn
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: True

    ECSTaskDigest:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.task_digest_table}
        AttributeDefinitions:
          - AttributeName: deployment
            AttributeType: S
          - AttributeName: cluster
            AttributeType: S
          - AttributeName: service
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: cluster-service-index
            KeySchema:
              - AttributeName: cluster
                KeyType: HASH
              - AttributeName: service
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        KeySchema:
          - AttributeName: deployment
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: True

    notifications:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.notifications_table}
        AttributeDefinitions:
          - AttributeName: deployment
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: deployment
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: True

    serviceGroups:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.service_groups_table}
        AttributeDefinitions:
          - AttributeName: group
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: group
            KeyType: HASH

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:stage, 'dev'}-${self:service}-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
          UnusedAccountValidityDays: 7
        Policies:
          PasswordPolicy:
            MinimumLength: 25
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
        Schema:
          - AttributeDataType: String
            Mutable: False
            Name: email
            Required: True
          - AttributeDataType: String
            Mutable: False
            Name: given_name
            Required: True
          - AttributeDataType: String
            Mutable: False
            Name: family_name
            Required: True
          - AttributeDataType: String
            Mutable: False
            Name: slack_username
            Required: False
          - AttributeDataType: String
            Mutable: False
            Name: user_arn
            Required: False
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${opt:stage, 'dev'}-${self:service}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false


  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient